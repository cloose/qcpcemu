#include "qimagescreenrenderer.h"

#include <QDebug>
#include <QImage>
#include <QWidget>

#include "exceptions.h"

static uchar cpc_palette[32][3] =
    {
        { 0x7f, 0x7f, 0x7f }, // White
        { 0x7f, 0x7f, 0x7f }, // White (not official)
        { 0x00, 0xff, 0x7f }, // Sea Green
        { 0xff, 0xff, 0x7f }, // Pastel Yellow
        { 0x00, 0x00, 0x7f }, // Blue
        { 0xff, 0x00, 0x7f }, // Purple
        { 0x00, 0x7f, 0x7f }, // Cyan
        { 0xff, 0x7f, 0x7f }, // Pink
        { 0xff, 0x00, 0x7f }, // Purple (not official)
        { 0xff, 0xff, 0x7f }, // Pastel Yellow (not official)
        { 0xff, 0xff, 0x00 }, // Bright Yellow
        { 0xff, 0xff, 0xff }, // Bright White
        { 0xff, 0x00, 0x00 }, // Bright Red
        { 0xff, 0x00, 0xff }, // Bright Magenta
        { 0xff, 0x7f, 0x00 }, // Orange
        { 0xff, 0x7f, 0xff }, // Pastel Magenta
        { 0x00, 0x00, 0x7f }, // Blue (not official)
        { 0x00, 0xff, 0x7f }, // Sea Green (not official)
        { 0x00, 0xff, 0x00 }, // Bright Green
        { 0x00, 0xff, 0xff }, // Bright Cyan
        { 0x00, 0x00, 0x00 }, // Black
        { 0x00, 0x00, 0xff }, // Bright Blue
        { 0x00, 0x7f, 0x00 }, // Green
        { 0x00, 0x7f, 0xff }, // Sky Blue
        { 0x7f, 0x00, 0x7f }, // Magenta
        { 0x7f, 0xff, 0x7f }, // Pastel Green
        { 0x7f, 0xff, 0x00 }, // Lime
        { 0x7f, 0xff, 0xff }, // Pastel Cyan
        { 0x7f, 0x00, 0x00 }, // Red
        { 0x7f, 0x00, 0xff }, // Mauve
        { 0x7f, 0x7f, 0x00 }, // Yellow
        { 0x7f, 0x7f, 0xff }  // Pastel Blue
    };

static uchar mode0[256] =
    {
        0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
        0x0a, 0x02, 0x02, 0x0a, 0x0a, 0x02, 0x02, 0x02,
        0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
        0x0a, 0x02, 0x02, 0x0a, 0x0a, 0x02, 0x02, 0x02,
        0x0c, 0x04, 0x04, 0x0c, 0x0c, 0x04, 0x04, 0x04,
        0x0e, 0x06, 0x06, 0x0e, 0x0e, 0x06, 0x06, 0x06,
        0x0c, 0x04, 0x04, 0x0c, 0x0c, 0x04, 0x04, 0x04,
        0x0e, 0x06, 0x06, 0x0e, 0x0e, 0x06, 0x06, 0x06,
        0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
        0x0a, 0x02, 0x02, 0x0a, 0x0a, 0x02, 0x02, 0x02,
        0x08, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00,
        0x0a, 0x02, 0x02, 0x0a, 0x0a, 0x02, 0x02, 0x02,
        0x0c, 0x04, 0x04, 0x0c, 0x0c, 0x04, 0x04, 0x04,
        0x0e, 0x06, 0x06, 0x0e, 0x0e, 0x06, 0x06, 0x06,
        0x0c, 0x04, 0x04, 0x0c, 0x0c, 0x04, 0x04, 0x04,
        0x0e, 0x06, 0x06, 0x0e, 0x0e, 0x06, 0x06, 0x06,
        0x09, 0x01, 0x01, 0x09, 0x09, 0x01, 0x01, 0x01,
        0x0b, 0x03, 0x03, 0x0b, 0x0b, 0x03, 0x03, 0x03,
        0x09, 0x01, 0x01, 0x09, 0x09, 0x01, 0x01, 0x01,
        0x0b, 0x03, 0x03, 0x0b, 0x0b, 0x03, 0x03, 0x03,
        0x0d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05, 0x05,
        0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07,
        0x0d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05, 0x05,
        0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07,
        0x09, 0x01, 0x01, 0x09, 0x09, 0x01, 0x01, 0x01,
        0x0b, 0x03, 0x03, 0x0b, 0x0b, 0x03, 0x03, 0x03,
        0x09, 0x01, 0x01, 0x09, 0x09, 0x01, 0x01, 0x01,
        0x0b, 0x03, 0x03, 0x0b, 0x0b, 0x03, 0x03, 0x03,
        0x0d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05, 0x05,
        0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07,
        0x0d, 0x05, 0x05, 0x0d, 0x0d, 0x05, 0x05, 0x05,
        0x0f, 0x07, 0x07, 0x0f, 0x0f, 0x07, 0x07, 0x07
    };

static uchar mode1[256] =
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 0
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 8
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 16
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 24
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 32
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 40
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 48
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 56
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 64
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 72
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 80
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  // 88
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // 96
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //104
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  //112
        0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,  //120
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //128
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  //136
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //144
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  //152
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //160
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  //168
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //176
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,  //184
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,  //192
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03,
        0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
        0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03, 0x03
    };

static uchar mode2[256];

QImageScreenRenderer::QImageScreenRenderer(QWidget* widget)
    : m_widget(widget)
    , m_xpos(0)
    , m_ypos(0)
    , m_screenBuffer(new QImage(640, 200, QImage::Format_Indexed8))
    , m_scanLine(0)
    , m_drawFuncPtr(&QImageScreenRenderer::drawMode1)
{
    // initialize inks
    for (int i = 0; i < 17; ++i)
        m_inks[i] = 0x00;

    m_screenBuffer->setColorCount(32);
    for( int i = 0; i < 32; i++ )
    {
        int r = (cpc_palette[i][0]);
        int g = (cpc_palette[i][1]);
        int b = (cpc_palette[i][2]);
        m_screenBuffer->setColor(i, qRgb(r, g, b));
    }

    for (int i = 0; i < 256; i++)
    {
        int b0 = (i & 0x01) ? 1 : 0;
        int b1 = (i & 0x02) ? 1 : 0;
        int b2 = (i & 0x04) ? 1 : 0;
        int b3 = (i & 0x08) ? 1 : 0;

        int b4 = (i & 0x10) ? 1 : 0;
        int b5 = (i & 0x20) ? 1 : 0;
        int b6 = (i & 0x40) ? 1 : 0;
        int b7 = (i & 0x80) ? 1 : 0;

//        int ink1 = (b0 * 8) + (b4 * 4) + (b2 * 2) + b6;
        int ink2 = (b1 * 8) + (b5 * 4) + (b3 * 2) + b7;

        mode0[i] = ink2;

//        int displayByte = (b7 * 0x80)
//                        + (b6 * 0x40)
//                        + (b5 * 0x20)
//                        + (b4 * 0x10)
//                        + (b3 * 0x08)
//                        + (b2 * 0x04)
//                        + (b1 * 0x02)
//                        + b0;

//        qDebug() << QString("%1").arg(ink2, 2, 16, QLatin1Char('0'));
    }

//    qDebug() << "static uchar mode0[256] =";
//    for (int i = 0; i < 256; i++)
//    {
//        qDebug() << qPrintable(QString("        0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i++], 2, 16, QLatin1Char('0')))
//                 << qPrintable(QString("0x%1,").arg(mode0[i], 2, 16, QLatin1Char('0')));
//    }

    for (int i = 0; i < 256; i++)
    {
        int b0 = (i & 0x01) ? 1 : 0;
        int b1 = (i & 0x02) ? 1 : 0;
        int b2 = (i & 0x04) ? 1 : 0;
        int b3 = (i & 0x08) ? 1 : 0;
        int b4 = (i & 0x10) ? 1 : 0;
        int b5 = (i & 0x20) ? 1 : 0;
        int b6 = (i & 0x40) ? 1 : 0;
        int b7 = (i & 0x80) ? 1 : 0;

//        int ink1 = (b0 * 8) + (b4 * 4) + (b2 * 2) + b6;
//        int ink2 = (b1 * 8) + (b5 * 4) + (b3 * 2) + b7;

        mode2[i] = b0 * 4;

//        int displayByte = (b7 * 0x80)
//                        + (b6 * 0x40)
//                        + (b5 * 0x20)
//                        + (b4 * 0x10)
//                        + (b3 * 0x08)
//                        + (b2 * 0x04)
//                        + (b1 * 0x02)
//                        + b0;
    }

    m_screenBuffer->fill(0x00);
    m_scanLine = m_screenBuffer->scanLine(m_ypos);
}

QImageScreenRenderer::~QImageScreenRenderer()
{
    delete m_screenBuffer; m_screenBuffer = 0;
}

const QImage QImageScreenRenderer::screenBuffer() const
{
    return m_screenBuffer->convertToFormat(QImage::Format_ARGB32_Premultiplied);
}

void QImageScreenRenderer::draw(byte_t displayByte1, byte_t displayByte2)
{
//    m_xpos = charPos << 4;
//    if (m_xpos >= WIDTH) return;
//    if (m_ypos >= HEIGHT) return;
    (this->*m_drawFuncPtr)(displayByte1, displayByte2);
}

void QImageScreenRenderer::hSync()
{
    m_ypos++;
    m_xpos = 0;
    m_scanLine = m_screenBuffer->scanLine(m_ypos);
}

void QImageScreenRenderer::vSync(bool active)
{
    if (!active)
    {
        m_ypos = 0;
        m_scanLine = m_screenBuffer->scanLine(m_ypos);

        m_widget->update();
    }
}

void QImageScreenRenderer::setColor(uchar penNum, uchar colorNum)
{
    m_inks[penNum] = colorNum;
//    qDebug() << Q_FUNC_INFO << "pen" << penNum << "has color" << colorNum;
}

QColor QImageScreenRenderer::borderColor() const
{
    return QColor(m_screenBuffer->color(m_inks[16]));
}

void QImageScreenRenderer::setMode(byte_t mode)
{
    qDebug() << "[SR  ] set screen mode to" << mode;

    switch (mode) {
    case 0:
        m_drawFuncPtr = &QImageScreenRenderer::drawMode0;
        break;

    case 1:
        m_drawFuncPtr = &QImageScreenRenderer::drawMode1;
        break;

    case 2:
        m_drawFuncPtr = &QImageScreenRenderer::drawMode2;
        break;

    default:
        m_drawFuncPtr = &QImageScreenRenderer::drawMode1;
        break;
    }
}

// Mode 0 = 2 px per display byte, 16 colors, 160x200 px, 20x25 characters
void QImageScreenRenderer::drawMode0(byte_t displayByte1, byte_t displayByte2)
{
    Q_UNUSED(displayByte1)
    Q_UNUSED(displayByte2)

    if (m_xpos >= m_screenBuffer->width()) return;
    if (m_ypos >= m_screenBuffer->height()) return;

    for (int pixel = 0; pixel < 2; ++pixel)
    {
//        qDebug() << m_xpos << m_ypos << hex << displayByte1 << displayByte2;

        m_scanLine[m_xpos++]   = m_inks[mode0[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode0[displayByte2]];

        m_scanLine[m_xpos++]   = m_inks[mode0[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode0[displayByte2]];

        m_scanLine[m_xpos++]   = m_inks[mode0[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode0[displayByte2]];

        m_scanLine[m_xpos++]   = m_inks[mode0[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode0[displayByte2]];

        displayByte1 <<= 1;
        displayByte2 <<= 1;
    }

    m_xpos += 8;

//    qCritical() << "drawing in mode 0 not yet implemented";
//    throw NotImplementedException("drawing in mode 0 not yet implemented");
}

// Mode 1 = 4 px per display byte, 4 colors, 320x200 px, 40x25 characters
void QImageScreenRenderer::drawMode1(byte_t displayByte1, byte_t displayByte2)
{
    Q_CHECK_PTR(m_scanLine);

    if (m_xpos >= m_screenBuffer->width()) return;
    if (m_ypos >= m_screenBuffer->height()) return;

    for (int pixel = 0; pixel < 4; ++pixel)
    {
        m_scanLine[m_xpos++]   = m_inks[mode1[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode1[displayByte2]];

        m_scanLine[m_xpos++]   = m_inks[mode1[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode1[displayByte2]];

        displayByte1 <<= 1;
        displayByte2 <<= 1;
    }

    m_xpos += 8;
}

// Mode 2 = 8 px per display byte, 2 colors, 640x200 px, 80x25 characters
void QImageScreenRenderer::drawMode2(byte_t displayByte1, byte_t displayByte2)
{
    Q_UNUSED(displayByte1)
    Q_UNUSED(displayByte2)

//    qCritical() << "drawing in mode 2 not yet implemented";
//    throw NotImplementedException("drawing in mode 2 not yet implemented");
    Q_CHECK_PTR(m_scanLine);

    if (m_xpos >= m_screenBuffer->width()) return;
    if (m_ypos >= m_screenBuffer->height()) return;

    for (int pixel = 0; pixel < 8; ++pixel)
    {
        m_scanLine[m_xpos++]   = m_inks[mode2[displayByte1]];
        m_scanLine[(m_xpos+7)] = m_inks[mode2[displayByte2]];

        displayByte1 <<= 1;
        displayByte2 <<= 1;
    }

    m_xpos += 8;
}
